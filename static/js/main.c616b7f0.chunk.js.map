{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Title","Paragraph","App","Text","style","minHeight","height","width","marginTop","span","className","backgroundImage","process","fontSize","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uSAIQA,G,WAAAA,OAAOC,E,IAAAA,UA0DAC,G,IA1DWC,KAEJ,WAClB,OACI,kBAAC,IAAD,CAAMC,MAAO,CAAEC,UAAW,QAAQC,OAAO,OAAQC,MAAO,OAAOC,UAAU,IACrE,2BACI,uBAAKC,KAAM,GAAG,yBAAKC,UAAU,OAAON,MAAO,CAAEO,gBAAgB,OAAD,OAASC,GAAT,qBAC5D,uBAAKH,KAAM,IAAI,0BAAML,MAAO,CAAES,SAAU,KAAzB,0BACf,uBAAKJ,KAAM,GAAG,uBAAGK,KAAK,cAAR,aACd,uBAAKL,KAAM,GAAG,uBAAGK,KAAK,aAAR,YACd,uBAAKL,KAAM,GACP,uBAAGK,KAAK,cAAR,cAIR,uBAAKV,MAAO,CAACI,UAAU,KACnB,uBAAKC,KAAM,IACX,uBAAKA,KAAM,IACP,2BACI,kBAACT,EAAD,wBACA,kBAACC,EAAD,KACI,4BACI,0DACA,8DACA,8DAGR,4BACA,kBAACD,EAAD,iBACA,kBAACC,EAAD,KACI,4BACI,wCACA,uCACA,8CACA,iDACY,4BACJ,yCACA,gEAGR,8CACY,4BACJ,2EAKhB,4BACA,kBAACD,EAAD,cA9BJ,uBAkCJ,uBAAKS,KAAM,QC5CPM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c616b7f0.chunk.js","sourcesContent":["import { Col, Divider, Menu, Row, Typography } from 'antd';\nimport Grid from 'antd/lib/card/Grid';\nimport React from 'react';\nimport './App.css';\nconst { Title, Paragraph, Text } = Typography;\n\nconst App: React.FC = () => {\n    return (\n        <Grid style={{ minHeight: \"100vh\",height:'100%', width: '100%',marginTop:0 }}>\n            <Row>\n                <Col span={2}><div className=\"logo\" style={{ backgroundImage: `url(${process.env.PUBLIC_URL}/swalogo.svg)` }} /></Col>\n                <Col span={16}><span style={{ fontSize: 20 }}>Sweet Home Automation</span></Col>\n                <Col span={2}><a href=\"#/Products\">Products</a></Col>                             \n                <Col span={2}><a href=\"#/Pricing\">Pricing</a></Col>\n                <Col span={2}>                              \n                    <a href=\"#/About Us\">About Us</a>\n                </Col>\n\n            </Row>\n            <Row style={{marginTop:50}}>\n                <Col span={4}/>\n                <Col span={12}>\n                    <Typography>\n                        <Title>Why Choose SHA?</Title>\n                        <Paragraph>\n                            <ul>\n                                <li>open source where possible</li>\n                                <li>vetted products and technology</li>\n                                <li>security first configuration</li>\n                            </ul>\n                        </Paragraph>\n                        <Divider />\n                        <Title>Services</Title>\n                        <Paragraph>\n                            <ul>\n                                <li>lighting</li>\n                                <li>outlets</li>\n                                <li>motion sensors</li>\n                                <li>lighting schedules\n                                            <ul>\n                                        <li>dusk/dawn</li>\n                                        <li>holidays and special occasions</li>\n                                    </ul>\n                                </li>\n                                <li>external access\n                                            <ul>\n                                        <li>control your home when you are not home</li>\n                                    </ul>\n                                </li>\n                            </ul>\n                        </Paragraph>\n                        <Divider />\n                        <Title>Rates</Title>\n                        * hourly + product\n                            </Typography>\n                </Col>\n                <Col span={4} />\n            </Row>\n        </Grid>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}